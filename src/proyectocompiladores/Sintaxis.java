
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 29 23:03:39 CST 2022
//----------------------------------------------------

package proyectocompiladores;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 29 23:03:39 CST 2022
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\002\004\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\004\003\000\002\004\012\000\002\004\021\000\002\005" +
    "\032\000\002\006\066\000\002\007\015\000\002\010\014" +
    "\000\002\010\027\000\002\010\010\000\002\011\026\000" +
    "\002\011\013\000\002\011\005\000\002\012\174\000\002" +
    "\012\061\000\002\013\037\000\002\013\030\000\002\014" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0192\000\026\002\uffe5\006\016\010\022\011\004\013" +
    "\024\014\005\015\021\016\007\022\011\033\014\001\002" +
    "\000\004\033\u018b\001\002\000\006\031\u015b\033\u015a\001" +
    "\002\000\006\002\ufff8\031\ufff8\001\002\000\004\041\u0151" +
    "\001\002\000\006\002\ufff9\031\ufff9\001\002\000\004\041" +
    "\u0131\001\002\000\006\002\uffff\031\u012f\001\002\000\004" +
    "\002\ufffd\001\002\000\004\043\u011b\001\002\000\006\002" +
    "\ufff6\031\ufff6\001\002\000\004\037\347\001\002\000\006" +
    "\002\ufffa\031\ufffa\001\002\000\004\002\ufffb\001\002\000" +
    "\004\044\155\001\002\000\010\002\ufff5\031\ufff5\033\057" +
    "\001\002\000\004\002\ufffc\001\002\000\004\033\030\001" +
    "\002\000\006\002\ufff7\031\ufff7\001\002\000\004\002\027" +
    "\001\002\000\004\002\001\001\002\000\004\041\031\001" +
    "\002\000\004\023\032\001\002\000\004\043\033\001\002" +
    "\000\004\034\034\001\002\000\004\033\035\001\002\000" +
    "\004\016\036\001\002\000\004\004\037\001\002\000\004" +
    "\041\040\001\002\000\004\041\041\001\002\000\004\041" +
    "\042\001\002\000\004\004\043\001\002\000\004\016\044" +
    "\001\002\000\004\041\045\001\002\000\004\035\046\001" +
    "\002\000\004\016\047\001\002\000\004\033\050\001\002" +
    "\000\004\041\051\001\002\000\004\021\052\001\002\000" +
    "\004\043\053\001\002\000\004\034\054\001\002\000\004" +
    "\036\055\001\002\000\004\034\056\001\002\000\006\002" +
    "\ufff2\031\ufff2\001\002\000\004\044\060\001\002\000\004" +
    "\041\061\001\002\000\004\023\062\001\002\000\004\043" +
    "\063\001\002\000\004\034\064\001\002\000\006\011\004" +
    "\033\065\001\002\000\004\022\067\001\002\000\006\002" +
    "\ufff4\031\ufff4\001\002\000\004\041\070\001\002\000\004" +
    "\041\071\001\002\000\004\041\072\001\002\000\004\014" +
    "\005\001\002\000\006\015\021\022\075\001\002\000\004" +
    "\034\154\001\002\000\004\041\076\001\002\000\004\041" +
    "\077\001\002\000\004\041\100\001\002\000\004\015\101" +
    "\001\002\000\004\041\102\001\002\000\004\033\103\001" +
    "\002\000\004\004\104\001\002\000\004\043\105\001\002" +
    "\000\004\004\106\001\002\000\004\033\107\001\002\000" +
    "\004\016\110\001\002\000\004\004\111\001\002\000\004" +
    "\041\112\001\002\000\004\004\113\001\002\000\004\034" +
    "\114\001\002\000\004\004\115\001\002\000\004\043\116" +
    "\001\002\000\004\004\117\001\002\000\004\033\120\001" +
    "\002\000\004\016\121\001\002\000\004\004\122\001\002" +
    "\000\004\041\123\001\002\000\004\004\124\001\002\000" +
    "\004\034\125\001\002\000\004\004\126\001\002\000\004" +
    "\043\127\001\002\000\004\004\130\001\002\000\004\033" +
    "\131\001\002\000\004\016\132\001\002\000\004\004\133" +
    "\001\002\000\004\041\134\001\002\000\004\004\135\001" +
    "\002\000\004\034\136\001\002\000\004\020\137\001\002" +
    "\000\004\033\140\001\002\000\004\016\141\001\002\000" +
    "\004\004\142\001\002\000\004\041\143\001\002\000\004" +
    "\041\144\001\002\000\004\041\145\001\002\000\004\041" +
    "\146\001\002\000\004\041\147\001\002\000\004\041\150" +
    "\001\002\000\004\004\151\001\002\000\004\034\152\001" +
    "\002\000\004\034\153\001\002\000\010\002\uffe8\031\uffe8" +
    "\034\uffe8\001\002\000\006\002\ufff3\031\ufff3\001\002\000" +
    "\004\041\156\001\002\000\004\033\157\001\002\000\004" +
    "\004\160\001\002\000\004\044\161\001\002\000\004\041" +
    "\162\001\002\000\004\004\163\001\002\000\004\033\164" +
    "\001\002\000\004\016\165\001\002\000\004\041\166\001" +
    "\002\000\004\035\167\001\002\000\004\016\170\001\002" +
    "\000\004\033\171\001\002\000\004\044\172\001\002\000" +
    "\004\041\173\001\002\000\004\021\174\001\002\000\004" +
    "\043\175\001\002\000\004\034\176\001\002\000\004\036" +
    "\177\001\002\000\004\016\200\001\002\000\004\004\201" +
    "\001\002\000\004\041\202\001\002\000\004\041\203\001" +
    "\002\000\004\044\204\001\002\000\004\041\205\001\002" +
    "\000\004\021\206\001\002\000\004\041\207\001\002\000" +
    "\004\044\210\001\002\000\004\041\211\001\002\000\004" +
    "\004\212\001\002\000\004\034\213\001\002\000\004\041" +
    "\214\001\002\000\004\033\215\001\002\000\004\016\216" +
    "\001\002\000\004\041\217\001\002\000\004\035\220\001" +
    "\002\000\004\016\221\001\002\000\004\033\222\001\002" +
    "\000\004\044\223\001\002\000\004\041\224\001\002\000" +
    "\004\021\225\001\002\000\004\043\226\001\002\000\004" +
    "\034\227\001\002\000\004\036\230\001\002\000\004\016" +
    "\231\001\002\000\004\004\232\001\002\000\004\041\233" +
    "\001\002\000\004\041\234\001\002\000\004\044\235\001" +
    "\002\000\004\041\236\001\002\000\004\021\237\001\002" +
    "\000\004\041\240\001\002\000\004\041\241\001\002\000" +
    "\004\044\242\001\002\000\004\041\243\001\002\000\004" +
    "\004\244\001\002\000\004\034\245\001\002\000\004\041" +
    "\246\001\002\000\004\033\247\001\002\000\004\016\250" +
    "\001\002\000\004\041\251\001\002\000\004\035\252\001" +
    "\002\000\004\016\253\001\002\000\004\033\254\001\002" +
    "\000\004\044\255\001\002\000\004\041\256\001\002\000" +
    "\004\021\257\001\002\000\004\043\260\001\002\000\004" +
    "\034\261\001\002\000\004\036\262\001\002\000\004\016" +
    "\263\001\002\000\004\004\264\001\002\000\004\041\265" +
    "\001\002\000\004\041\266\001\002\000\004\044\267\001" +
    "\002\000\004\041\270\001\002\000\004\021\271\001\002" +
    "\000\004\041\272\001\002\000\004\041\273\001\002\000" +
    "\004\044\274\001\002\000\004\041\275\001\002\000\004" +
    "\004\276\001\002\000\004\034\277\001\002\000\004\041" +
    "\300\001\002\000\004\033\301\001\002\000\004\016\302" +
    "\001\002\000\004\041\303\001\002\000\004\035\304\001" +
    "\002\000\004\016\305\001\002\000\004\033\306\001\002" +
    "\000\004\044\307\001\002\000\004\041\310\001\002\000" +
    "\004\021\311\001\002\000\004\043\312\001\002\000\004" +
    "\034\313\001\002\000\004\036\314\001\002\000\004\016" +
    "\315\001\002\000\004\004\316\001\002\000\004\041\317" +
    "\001\002\000\004\041\320\001\002\000\004\044\321\001" +
    "\002\000\004\041\322\001\002\000\004\021\323\001\002" +
    "\000\004\041\324\001\002\000\004\041\325\001\002\000" +
    "\004\044\326\001\002\000\004\041\327\001\002\000\004" +
    "\004\330\001\002\000\004\034\331\001\002\000\004\020" +
    "\332\001\002\000\004\033\333\001\002\000\004\016\334" +
    "\001\002\000\004\004\335\001\002\000\004\044\336\001" +
    "\002\000\004\041\337\001\002\000\004\041\340\001\002" +
    "\000\004\041\341\001\002\000\004\041\342\001\002\000" +
    "\004\004\343\001\002\000\004\034\344\001\002\000\004" +
    "\034\345\001\002\000\010\002\uffe9\031\uffe9\034\uffe9\001" +
    "\002\000\004\002\ufffe\001\002\000\004\031\350\001\002" +
    "\000\004\032\351\001\002\000\004\033\352\001\002\000" +
    "\004\006\353\001\002\000\004\041\354\001\002\000\004" +
    "\017\355\001\002\000\004\043\356\001\002\000\004\040" +
    "\357\001\002\000\004\006\360\001\002\000\004\041\361" +
    "\001\002\000\004\017\362\001\002\000\004\043\363\001" +
    "\002\000\004\040\364\001\002\000\004\006\365\001\002" +
    "\000\004\041\366\001\002\000\004\040\367\001\002\000" +
    "\004\041\370\001\002\000\004\023\371\001\002\000\004" +
    "\023\372\001\002\000\004\004\373\001\002\000\004\041" +
    "\374\001\002\000\004\041\375\001\002\000\004\041\376" +
    "\001\002\000\004\004\377\001\002\000\004\040\u0100\001" +
    "\002\000\004\041\u0101\001\002\000\004\023\u0102\001\002" +
    "\000\004\023\u0103\001\002\000\004\041\u0104\001\002\000" +
    "\004\040\u0105\001\002\000\004\041\u0106\001\002\000\004" +
    "\023\u0107\001\002\000\004\023\u0108\001\002\000\004\004" +
    "\u0109\001\002\000\004\041\u010a\001\002\000\004\041\u010b" +
    "\001\002\000\004\041\u010c\001\002\000\004\004\u010d\001" +
    "\002\000\004\040\u010e\001\002\000\004\041\u010f\001\002" +
    "\000\004\023\u0110\001\002\000\004\023\u0111\001\002\000" +
    "\004\041\u0112\001\002\000\004\040\u0113\001\002\000\004" +
    "\041\u0114\001\002\000\004\021\u0115\001\002\000\004\041" +
    "\u0116\001\002\000\004\017\u0117\001\002\000\004\041\u0118" +
    "\001\002\000\004\040\u0119\001\002\000\004\034\u011a\001" +
    "\002\000\004\002\ufff1\001\002\000\004\021\u011c\001\002" +
    "\000\004\031\u011d\001\002\000\004\043\u011e\001\002\000" +
    "\004\021\u011f\001\002\000\004\043\u0120\001\002\000\004" +
    "\032\u0121\001\002\000\004\033\u0122\001\002\000\004\043" +
    "\u0123\001\002\000\004\021\u0124\001\002\000\004\043\u0125" +
    "\001\002\000\004\034\u0126\001\002\000\004\035\u0127\001" +
    "\002\000\004\043\u0128\001\002\000\004\021\u0129\001\002" +
    "\000\004\043\u012a\001\002\000\004\036\u012b\001\002\000" +
    "\004\034\u012c\001\002\000\004\042\u012d\001\002\000\004" +
    "\043\u012e\001\002\000\004\002\uffee\001\002\000\004\032" +
    "\u0130\001\002\000\004\002\000\001\002\000\004\041\u0132" +
    "\001\002\000\004\041\u0133\001\002\000\006\015\101\016" +
    "\u0134\001\002\000\004\041\u0137\001\002\000\004\010\022" +
    "\001\002\000\004\002\uffed\001\002\000\006\041\u0139\043" +
    "\u0138\001\002\000\010\002\uffea\010\uffea\016\u0140\001\002" +
    "\000\004\016\u013a\001\002\000\004\041\u013b\001\002\000" +
    "\004\041\u013c\001\002\000\004\016\u013d\001\002\000\004" +
    "\041\u013e\001\002\000\004\041\u013f\001\002\000\006\002" +
    "\uffeb\010\uffeb\001\002\000\004\041\u0141\001\002\000\004" +
    "\043\u0142\001\002\000\004\016\u0143\001\002\000\004\041" +
    "\u0144\001\002\000\004\035\u0145\001\002\000\004\016\u0146" +
    "\001\002\000\004\044\u0147\001\002\000\004\041\u0148\001" +
    "\002\000\004\021\u0149\001\002\000\004\044\u014a\001\002" +
    "\000\004\041\u014b\001\002\000\004\036\u014c\001\002\000" +
    "\004\022\u014d\001\002\000\004\041\u014e\001\002\000\004" +
    "\041\u014f\001\002\000\004\041\u0150\001\002\000\006\002" +
    "\uffec\010\uffec\001\002\000\010\035\u0152\041\u0139\043\u0138" +
    "\001\002\000\004\016\u0153\001\002\000\004\044\u0154\001" +
    "\002\000\004\041\u0155\001\002\000\004\021\u0156\001\002" +
    "\000\004\044\u0157\001\002\000\004\041\u0158\001\002\000" +
    "\004\036\u0159\001\002\000\004\002\uffef\001\002\000\004" +
    "\016\u0170\001\002\000\004\041\u015c\001\002\000\004\017" +
    "\u015d\001\002\000\004\043\u015e\001\002\000\004\040\u015f" +
    "\001\002\000\004\041\u0160\001\002\000\004\023\u0161\001" +
    "\002\000\004\043\u0162\001\002\000\004\040\u0163\001\002" +
    "\000\004\041\u0164\001\002\000\004\021\u0165\001\002\000" +
    "\004\021\u0166\001\002\000\004\032\u0167\001\002\000\004" +
    "\033\u0168\001\002\000\004\041\u0169\001\002\000\004\017" +
    "\u016a\001\002\000\004\041\u016b\001\002\000\004\021\u016c" +
    "\001\002\000\004\041\u016d\001\002\000\004\040\u016e\001" +
    "\002\000\004\034\u016f\001\002\000\012\002\uffe6\015\uffe6" +
    "\022\uffe6\031\uffe6\001\002\000\004\041\u0171\001\002\000" +
    "\004\043\u0172\001\002\000\004\034\u0173\001\002\000\004" +
    "\033\u0174\001\002\000\004\044\u0175\001\002\000\004\041" +
    "\u0176\001\002\000\004\023\u0177\001\002\000\004\044\u0178" +
    "\001\002\000\004\041\u0179\001\002\000\004\034\u017a\001" +
    "\002\000\004\033\u017b\001\002\000\004\016\u017c\001\002" +
    "\000\004\041\u017d\001\002\000\004\034\u017e\001\002\000" +
    "\004\033\u017f\001\002\000\004\016\u0180\001\002\000\004" +
    "\004\u0181\001\002\000\004\041\u0182\001\002\000\004\041" +
    "\u0183\001\002\000\004\041\u0184\001\002\000\004\041\u0185" +
    "\001\002\000\004\041\u0186\001\002\000\004\044\u0187\001" +
    "\002\000\004\041\u0188\001\002\000\004\004\u0189\001\002" +
    "\000\004\034\u018a\001\002\000\012\002\uffe7\015\uffe7\022" +
    "\uffe7\031\uffe7\001\002\000\004\016\u018c\001\002\000\004" +
    "\004\u018d\001\002\000\004\044\u018e\001\002\000\004\041" +
    "\u018f\001\002\000\004\041\u0190\001\002\000\004\041\u0191" +
    "\001\002\000\004\043\u0192\001\002\000\004\004\u0193\001" +
    "\002\000\004\034\u0194\001\002\000\006\002\ufff0\031\ufff0" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0192\000\026\002\025\003\011\004\016\005\007\007" +
    "\005\010\012\011\017\012\014\013\024\014\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\345\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\072\001\001\000\004\012\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\u0134\001\001\000\002\001\001\000\004\004\u0135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESIONES ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FOR ::= For ParentesisApertura Identificador Igual Numero PuntoComa Identificador OperadoresRelacionales Numero PuntoComa Identificador OperadoresAritmeticos OperadoresAritmeticos ParentesisCierre LlaveApertura Identificador Igual Identificador OperadoresAritmeticos Identificador PuntoComa LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-21)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FOR ::= For LlaveApertura PalabraReservada Identificador Numero LlaveCierre LlaveApertura Dolar Identificador OperadoresRelacionales Dolar Identificador LlaveCierre LlaveApertura PalabraReservada Identificador LlaveCierre LlaveApertura PalabraReservada Comillas Identificador Identificador Identificador Identificador Identificador Dolar Identificador Comillas LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-28)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SWITCH ::= OperadoresLogicos Identificador Identificador Identificador SwitchCase Identificador LlaveApertura Comillas Numero Comillas LlaveApertura PalabraReservada Comillas Identificador Comillas LlaveCierre Comillas Numero Comillas LlaveApertura PalabraReservada Comillas Identificador Comillas LlaveCierre Comillas Numero Comillas LlaveApertura PalabraReservada Comillas Identificador Comillas LlaveCierre Defecto LlaveApertura PalabraReservada Comillas Identificador Identificador Identificador Identificador Identificador Identificador Comillas LlaveCierre LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-46)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SWITCH ::= SwitchCase Dolar Identificador LlaveApertura Comillas Dolar Identificador Comillas LlaveApertura PalabraReservada Identificador CorcheteApertura PalabraReservada LlaveApertura Dolar Identificador OperadoresAritmeticos Numero LlaveCierre CorcheteCierre PalabraReservada Comillas Identificador Identificador Dolar Identificador OperadoresAritmeticos Identificador Dolar Identificador Comillas LlaveCierre Identificador LlaveApertura PalabraReservada Identificador CorcheteApertura PalabraReservada LlaveApertura Dolar Identificador OperadoresAritmeticos Numero LlaveCierre CorcheteCierre PalabraReservada Comillas Identificador Identificador Dolar Identificador OperadoresAritmeticos Identificador Identificador Dolar Identificador Comillas LlaveCierre Identificador LlaveApertura PalabraReservada Identificador CorcheteApertura PalabraReservada LlaveApertura Dolar Identificador OperadoresAritmeticos Numero LlaveCierre CorcheteCierre PalabraReservada Comillas Identificador Identificador Dolar Identificador OperadoresAritmeticos Identificador Identificador Dolar Identificador Comillas LlaveCierre Identificador LlaveApertura PalabraReservada Identificador CorcheteApertura PalabraReservada LlaveApertura Dolar Identificador OperadoresAritmeticos Numero LlaveCierre CorcheteCierre PalabraReservada Comillas Identificador Identificador Dolar Identificador OperadoresAritmeticos Identificador Identificador Dolar Identificador Comillas LlaveCierre Defecto LlaveApertura PalabraReservada Comillas Dolar Identificador Identificador Identificador Identificador Comillas LlaveCierre LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-121)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VARIABLES ::= PalabraReservada Identificador Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VARIABLES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VARIABLES ::= PalabraReservada Identificador Identificador PalabraReservada Identificador Identificador PalabraReservada Identificador Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VARIABLES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VARIABLES ::= PalabraReservada Identificador Numero PalabraReservada Identificador Numero PalabraReservada Identificador CorcheteApertura PalabraReservada Dolar Identificador OperadoresAritmeticos Dolar Identificador CorcheteCierre OperadoresLogicos Identificador Identificador Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VARIABLES",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-19)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= OperadoresLogicos Identificador Identificador Identificador VARIABLES IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= LlaveApertura Numero OperadoresAritmeticos ParentesisApertura Numero OperadoresAritmeticos Numero ParentesisCierre LlaveApertura Numero OperadoresAritmeticos Numero LlaveCierre CorcheteApertura Numero OperadoresAritmeticos Numero CorcheteCierre LlaveCierre Exponente Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-20)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= PalabraReservada Identificador CorcheteApertura PalabraReservada Dolar Identificador OperadoresAritmeticos Dolar Identificador CorcheteCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ELSE ::= Else LlaveApertura PalabraReservada Comillas Dolar Identificador Identificador Identificador Numero Comillas LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MAIN ::= Main ParentesisApertura ParentesisCierre LlaveApertura Int Identificador Igual Numero PuntoComa Int Identificador Igual Numero PuntoComa Int Identificador PuntoComa Identificador OperadoresRelacionales OperadoresRelacionales Comillas Identificador Identificador Identificador Comillas PuntoComa Identificador OperadoresRelacionales OperadoresRelacionales Identificador PuntoComa Identificador OperadoresRelacionales OperadoresRelacionales Comillas Identificador Identificador Identificador Comillas PuntoComa Identificador OperadoresRelacionales OperadoresRelacionales Identificador PuntoComa Identificador OperadoresAritmeticos Identificador Igual Identificador PuntoComa LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("MAIN",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-51)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // WHILE ::= While LlaveApertura Identificador OperadoresRelacionales Numero LlaveCierre LlaveApertura PalabraReservada Comillas Identificador Identificador Identificador Comillas PalabraReservada Identificador CorcheteApertura PalabraReservada LlaveApertura Identificador OperadoresAritmeticos Numero LlaveCierre CorcheteCierre LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-23)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IF ::= If LlaveApertura Dolar Identificador OperadoresRelacionales Numero LlaveCierre LlaveApertura OperadoresLogicos Identificador Identificador Identificador FOR SWITCH LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-14)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IF ::= If LlaveApertura Dolar Identificador OperadoresRelacionales Numero LlaveCierre ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IF ::= If 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Int MAIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIA ParentesisApertura ParentesisCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

